//Programming Language Java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author Adalberto Monar
 */

public class BusquedaAStar_Main {
    
    public static final String[][] TABLERO =  { {"#"," ","#"," "," "," ","#","G"},
                                                {" "," ","#"," "," ","#"," "," "},
                                                {" ","#","#"," ","#","#"," ","#"},
                                                {" ","#","#"," "," ","#"," ","#"},
                                                {" ","#","#","#"," ","#"," ","#"},
                                                {" "," ","#","#"," ","#"," "," "},
                                                {"#"," "," "," "," "," ","#"," "},
                                                {"S"," ","#","#","#"," "," "," "} };
    public static final int LIMITEIZQU = -1;
    public static final int LIMITEDERE = TABLERO[0].length;
    public static final int LIMITEARRIBA = -1;
    public static final int LIMITEABAJO = TABLERO.length;
    public static final int[][] STARINICIAL = pasarposicion(TABLERO,"S");
    public static final int[][] GOAL = pasarposicion(TABLERO,"G");
    
    public static void pt() {
        try {
            System.in.read();
        } catch (IOException e) {
            // TODO Auto-generated catch block
        }
    }
   
    public static void graficartablero(String[][] matriz, String simbolodelcero) {
        String valorficha;
        
        if ("".equals(simbolodelcero)) simbolodelcero=" "; 
        for (int i=0; i<=matriz[0].length-1; i++) {
            if (i==0) System.out.print("┌---┬");
            else 
            if (i==matriz[0].length-1) System.out.println("---┐");
            else System.out.print("---┬");
        }
        for (int i = 0; i <= matriz.length-1; i++) {
            for (int j = 0; j <= matriz[i].length-1; j++) { 
                valorficha = matriz[i][j];
                if ("0".equals(valorficha)) {
                    valorficha = simbolodelcero;
                }
                int resto;
                resto = j % 2;
                switch (resto) {
                    case 0:
                        if (valorficha.length()==1) System.out.print("│ " + valorficha + " │");
                        else System.out.print("│" + String.format("%-3s", valorficha) + "│");
                        break;
                    case 1:
                        if (valorficha.length()==1) System.out.print(" " + valorficha + " ");
                        else System.out.print(String.format("%-3s", valorficha));
                        if (j==matriz[0].length-1) System.out.print("│");
                        break;
                    default:
                        //System.out.println(" " + valorficha + " ");
                        break;
                }
                if ((j==matriz[0].length-1)&&(i!=matriz.length-1)) {
                    for (int k=0; k<=matriz[0].length-1; k++) {
                        if (k==0) {
                            System.out.println();
                            System.out.print("├---┼");
                        } else 
                        if (k==matriz[0].length-1) System.out.println("---┤");
                        else System.out.print("---┼");
                    }
                }
            }
            if (i==matriz.length-1) {
                for (int k=0; k<=matriz[0].length-1; k++) {
                    if (k==0) {
                        System.out.println();
                        System.out.print("└---┴");
                    }
                    else 
                    if (k==matriz[0].length-1) System.out.println("---┘");
                    else System.out.print("---┴");
                }
            }
        }
    }
   
    //ini00
    private static ArrayList<ArrayList<ArrayList<Integer>>> hijos(String[][] board) {
        
        ArrayList<ArrayList<ArrayList<Integer>>> OpenHijos;
        OpenHijos = new ArrayList<>();
        
        String[][] estado = board;
        
        String[][] izq = new String[estado.length][estado[0].length];
        String[][] dere = new String[estado.length][estado[0].length];
        String[][] arriba = new String[estado.length][estado[0].length];
        String[][] abajo = new String[estado.length][estado[0].length];
        for (int k=0; k<estado.length; k++) {
            for (int l=0; l<estado[k].length; l++) {
                arriba[k][l] = estado[k][l];
                izq[k][l] = estado[k][l];
                dere[k][l] = estado[k][l];
                abajo[k][l] = estado[k][l];
            }
        }
        
        int[][][] arrleft = adjMovManYsuma(izq);
        int[][][] arrright = adjMovManYsuma(dere);
        int[][][] arrup = adjMovManYsuma(arriba);
        int[][][] arrdown = adjMovManYsuma(abajo);
                
        int posi=0, posj=0;
        for (int i=0; i<=estado.length-1;i++) {
            for (int j=0; j<=estado[i].length-1; j++) {
                if ("S".equals(estado[i][j])) {
                    posi = i;
                    posj = j;
                    j = estado[i].length-1;
                    i = estado.length-1;
                }
            }
        }
        
        if ( posj-1 != LIMITEIZQU ) {
            if ( !"#".equals(izq[posi][posj-1]) ) {
                izq[posi][posj] = izq[posi][posj-1];
                izq[posi][posj-1] = "S";
                //graficartablero(izq,"");
                arrleft = adjMovManYsuma(izq);
                for (int x = 0; x < arrleft.length; x++) {
                    ArrayList<ArrayList<Integer>> campo = new ArrayList<>();
                    for (int y = 0; y < arrleft[x].length; y++) {
                        ArrayList<Integer> subcampo = new ArrayList<>();
                        for (int z = 0; z < arrleft[x][y].length; z++) {
                            subcampo.add(arrleft[x][y][z]);
                        }
                        campo.add(subcampo);
                    }
                    OpenHijos.add(campo);
                }
            }
        }
        if ( posj+1 != LIMITEDERE ) {
            if ( !"#".equals(dere[posi][posj+1]) ) {
                dere[posi][posj] = dere[posi][posj+1];
                dere[posi][posj+1] = "S";
                //graficartablero(dere,"");
                arrright = adjMovManYsuma(dere);
                for (int x = 0; x < arrright.length; x++) {
                    ArrayList<ArrayList<Integer>> campo = new ArrayList<>();
                    for (int y = 0; y < arrright[x].length; y++) {
                        ArrayList<Integer> subcampo = new ArrayList<>();
                        for (int z = 0; z < arrright[x][y].length; z++) {
                            subcampo.add(arrright[x][y][z]);
                        }
                        campo.add(subcampo);
                    }
                    OpenHijos.add(campo);
                }
            }
        }
        if ( posi-1 != LIMITEARRIBA ) {
            if ( !"#".equals(arriba[posi-1][posj]) ) {
                arriba[posi][posj] = arriba[posi-1][posj];
                arriba[posi-1][posj] = "S";
                //graficartablero(arriba,"");
                arrup = adjMovManYsuma(arriba);
                for (int x = 0; x < arrup.length; x++) {
                    ArrayList<ArrayList<Integer>> campo = new ArrayList<>();
                    for (int y = 0; y < arrup[x].length; y++) {
                        ArrayList<Integer> subcampo = new ArrayList<>();
                        for (int z = 0; z < arrup[x][y].length; z++) {
                            subcampo.add(arrup[x][y][z]);
                        }
                        campo.add(subcampo);
                    }
                    OpenHijos.add(campo);
                }
            }
        }
        if ( posi+1 != LIMITEABAJO ) {
            if ( !"#".equals(abajo[posi+1][posj]) ) {
                abajo[posi][posj] = abajo[posi+1][posj];
                abajo[posi+1][posj] = "S";
                //graficartablero(abajo,"");
                arrdown = adjMovManYsuma(abajo);
                for (int x = 0; x < arrdown.length; x++) {
                    ArrayList<ArrayList<Integer>> campo = new ArrayList<>();
                    for (int y = 0; y < arrdown[x].length; y++) {
                        ArrayList<Integer> subcampo = new ArrayList<>();
                        for (int z = 0; z < arrdown[x][y].length; z++) {
                            subcampo.add(arrdown[x][y][z]);
                        }
                        campo.add(subcampo);
                    }
                    OpenHijos.add(campo);
                }
            }
        }
        return OpenHijos;
    }
    //fin00
    
    private static int[][][] adjMovManYsuma(String[][] matriz) {
        int[][] Smatriz = pasarposicion(matriz,"S");
         
        int[][][] arreglo = { { { -1, -1 },
                                { -1, -1, -1} } };
        
        arreglo[0][0][0] = Smatriz[0][0];
        arreglo[0][0][1] = Smatriz[0][1];
        
        int gn = Math.abs(Smatriz[0][0]-STARINICIAL[0][0]) + Math.abs(Smatriz[0][1]-STARINICIAL[0][1]);
        int hn = Math.abs(GOAL[0][0]-Smatriz[0][0]) + Math.abs(GOAL[0][1]-Smatriz[0][1]);
        int fn;
        fn = gn + hn;
        arreglo[0][1][0] = gn;
        arreglo[0][1][1] = hn;
        arreglo[0][1][2] = fn;
        
        return arreglo;
    }
    
    private static String[][] moverS(String[][] board, int ApX, int ApY) {
        String[][] arreglo = board;
        int[][] aux = pasarposicion(arreglo,"S");
        arreglo[aux[0][0]][aux[0][1]] = " ";
        arreglo[ApX][ApY] = "S";
        return arreglo;
    }
    
    private static void ImprimirLista(ArrayList<ArrayList<ArrayList<Integer>>> ListaArreglo, String Nombre) {
        System.out.print(Nombre);
        for (int x = 0; x < ListaArreglo.size(); x++) {
            System.out.print("{");
            for (int y = 0; y < ListaArreglo.get(x).size(); y++) {
                System.out.print("{");
                for (int z = 0; z < ListaArreglo.get(x).get(y).size(); z++) {
                    if (z!=ListaArreglo.get(x).get(y).size()-1) {
                        System.out.print(ListaArreglo.get(x).get(y).get(z)+",");
                    } else {
                        System.out.print(ListaArreglo.get(x).get(y).get(z));
                    }
                }
                if (y!=ListaArreglo.get(x).size()-1) {
                    System.out.print("},");
                } else {
                    System.out.print("}");
                }
            }
            System.out.println("}");
        }
    }
    
    private static void Solucion_ASMM(String[][] tabla) {
        
        ArrayList<ArrayList<ArrayList<Integer>>> OpenList;
        OpenList = new ArrayList<>();
        
        ArrayList<ArrayList<ArrayList<Integer>>> ClosedList;
        ClosedList = new ArrayList<>();
        
        int[][][] Arreglo = adjMovManYsuma(tabla);
        for (int x = 0; x < Arreglo.length; x++) {
            ArrayList<ArrayList<Integer>> campo = new ArrayList<>();
            for (int y = 0; y < Arreglo[x].length; y++) {
                ArrayList<Integer> subcampo = new ArrayList<>();
                for (int z = 0; z < Arreglo[x][y].length; z++) {
                    subcampo.add(Arreglo[x][y][z]);
                }
                campo.add(subcampo);
            }
            OpenList.add(campo);
        }
        
        ArrayList<ArrayList<ArrayList<Integer>>> MenorCT = new ArrayList<>();
        MenorCT.add(OpenList.get(0));

        while (!OpenList.isEmpty()) {
            //{{3,3},{0,6,6}}
            for (int x=0; x<=OpenList.size()-1; x++) {
                if (x==0) {
                    MenorCT.clear();
                    MenorCT.add(OpenList.get(x));
                } else {
                    if (OpenList.get(x).get(1).get(2)<MenorCT.get(0).get(1).get(2)) {
                        MenorCT.clear();
                        MenorCT.add(OpenList.get(x));
                    }
                }    
            }

            if ((MenorCT.get(0).get(0).get(0).equals(GOAL[0][0]))&&(MenorCT.get(0).get(0).get(1).equals(GOAL[0][1]))) {
                ClosedList.add(MenorCT.get(0));
                System.out.println();
                System.out.println("POR ALGORITMO A*");
                System.out.print("Número de Casillas Recorridas = ");
                System.out.println(ClosedList.size());
                System.out.println("Estas Casillas fueron:");
                for (int z=0; z<=ClosedList.size()-1; z++) {
                    tabla[ClosedList.get(z).get(0).get(0)][ClosedList.get(z).get(0).get(1)]= Integer.toString(z+1).trim();
                }
                //ImprimirLista(ClosedList,"");
                graficartablero(tabla,"");
                
                ArrayList<ArrayList<ArrayList<Integer>>> Ruta;
                Ruta = new ArrayList<>();
                Ruta.add(0,ClosedList.get(ClosedList.size()-1));
                int aux = ClosedList.size();
                for (int z=ClosedList.size()-1; z>=0; z--) {
                    if ((z!=ClosedList.size()-1)&&(z!=0)) {
                        int[][] ep = pasarposicion(tabla,Integer.toString(aux).trim());
                        int[][] ea = pasarposicion(tabla,Integer.toString(z+1).trim());
                        int dep;
                        dep = Math.abs(ep[0][0]-ea[0][0]) + Math.abs(ep[0][1]-ea[0][1]);
                        if (dep==1) {
                            Ruta.add(0,ClosedList.get(z));
                            aux = z + 1;
                        } else tabla[ClosedList.get(z).get(0).get(0)][ClosedList.get(z).get(0).get(1)] = " ";
                    }
                }
                if (ClosedList.size()>1) {
                    Ruta.add(0,ClosedList.get(0));
                }
                System.out.println("RUTA RESULTANTE ("+Integer.toString(Ruta.size())+" casillas)");
                ImprimirLista(Ruta,"");
                System.out.println("TRAZO");
                graficartablero(tabla,"");
                System.out.println("Fin");
                break;
            } else {
                ClosedList.add(MenorCT.get(0));
                OpenList.addAll(hijos(moverS(tabla,MenorCT.get(0).get(0).get(0),MenorCT.get(0).get(0).get(1))));

                for (int i=0; i<=ClosedList.size()-1; i++) {
                    //System.out.println(ClosedList.get(i));
                    if (OpenList.indexOf(ClosedList.get(i))!=-1) {
                        OpenList.remove(OpenList.indexOf(ClosedList.get(i)));
                        i--;
                    }
                }
                //ImprimirLista(OpenList,"OpenList con sacada: ");
                //pt();
            }
        } //aqui
        
        //fin01
        
        if ( OpenList.isEmpty() ) {
            System.out.println("BLOQUEADO");
        }
        //}
    }
    
    //para arreglar
    
    private static int[][] pasarposicion(String[][] board, String character) {
        int[][] arreglo = { { -1 , -1 } };
        for (int i=0; i<=board.length-1;i++) {
            for (int j=0; j<=board[i].length-1; j++) {
                if (board[i][j].equals(character)) {
                    arreglo[0][0] = i;
                    arreglo[0][1] = j;
                    j = board[i].length-1;
                    i = board.length-1;
                }
            }
        }
        return arreglo;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        // Declaramos el objeto teclado
             
        String[][] Scamino = new String[TABLERO.length][TABLERO[0].length];
        for (int i=0; i<=TABLERO.length-1;i++) {
            for (int j=0; j<=TABLERO[i].length-1; j++) {
                Scamino[i][j] = TABLERO[i][j];
            }
        }
        
        System.out.println("TABLERO");
        graficartablero(TABLERO,"");
        
        System.out.println("STAR está en la Fila = "+Integer.toString(STARINICIAL[0][0])+" , Colu = "+Integer.toString(STARINICIAL[0][1]));
        
        System.out.println("GOAL está en la Fila = "+Integer.toString(GOAL[0][0])+" , Colu = "+Integer.toString(GOAL[0][1]));
                
        if (GOAL[0][0]!=-1 && STARINICIAL[0][0]!=-1) {
            Solucion_ASMM(Scamino);
        } else System.out.println("NO HUBO RECORRIDO");
    }
    
}
